{"ast":null,"code":"class WebGLMaterial {\n  constructor(glContext, color, ambient, vsSource, fsSource) {\n    this.glContext = glContext;\n    this.shaderProgram = null;\n    this.vertexShader = null;\n    this.fragmentShader = null;\n    this.color = color;\n    this.ambient = ambient;\n    this.initShaderProgram(vsSource, fsSource);\n    this.programInfo = {\n      program: this.shaderProgram,\n      attribLocations: {\n        vertexPosition: this.glContext.getAttribLocation(this.shaderProgram, \"vertex_position\"),\n        normal: this.glContext.getAttribLocation(this.shaderProgram, \"vertex_normal\")\n      },\n      uniformLocations: {\n        projectionMatrix: this.glContext.getUniformLocation(this.shaderProgram, \"uProjectionViewMatrix\"),\n        modelViewMatrix: this.glContext.getUniformLocation(this.shaderProgram, \"uModelViewMatrix\"),\n        normalMatrix: this.glContext.getUniformLocation(this.shaderProgram, \"uNormalMatrix\"),\n        ambientLight: this.glContext.getUniformLocation(this.shaderProgram, \"ambientLight\"),\n        lightPosition: this.glContext.getUniformLocation(this.shaderProgram, \"lightPosition\"),\n        color: this.glContext.getUniformLocation(this.shaderProgram, \"color\") // _time: this.glContext.getUniformLocation(this.shaderProgram, \"_time\")\n\n      }\n    };\n  }\n\n  initShaderProgram(vsSource, fsSource) {\n    this.vertexShader = this.loadShader(this.glContext.VERTEX_SHADER, vsSource);\n    this.fragmentShader = this.loadShader(this.glContext.FRAGMENT_SHADER, fsSource);\n    this.shaderProgram = this.glContext.createProgram();\n    this.glContext.attachShader(this.shaderProgram, this.vertexShader);\n    this.glContext.attachShader(this.shaderProgram, this.fragmentShader);\n    this.glContext.linkProgram(this.shaderProgram);\n\n    if (!this.glContext.getProgramParameter(this.shaderProgram, this.glContext.LINK_STATUS)) {\n      var compilationLog = this.glContext.getProgramInfoLog(this.shaderProgram);\n      console.log('Shader compiler log: ' + compilationLog); // alert(\"Shader Initialization Failed!\");\n    }\n  }\n\n  loadShader(type, source) {\n    const shader = this.glContext.createShader(type);\n    this.glContext.shaderSource(shader, source);\n    this.glContext.compileShader(shader);\n\n    if (!this.glContext.getShaderParameter(shader, this.glContext.COMPILE_STATUS)) {\n      var compilationLog = this.glContext.getShaderInfoLog(shader);\n      console.log('Shader compiler log: ' + compilationLog); // alert(\"Shader Compilation Failed!\");\n    }\n\n    return shader;\n  }\n\n}\n\nexport default WebGLMaterial;","map":{"version":3,"sources":["/Users/nathanromriell/Desktop/Portfolio/objtoweb/webglviewer/src/Data/WebGLMaterial.js"],"names":["WebGLMaterial","constructor","glContext","color","ambient","vsSource","fsSource","shaderProgram","vertexShader","fragmentShader","initShaderProgram","programInfo","program","attribLocations","vertexPosition","getAttribLocation","normal","uniformLocations","projectionMatrix","getUniformLocation","modelViewMatrix","normalMatrix","ambientLight","lightPosition","loadShader","VERTEX_SHADER","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","compilationLog","getProgramInfoLog","console","log","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog"],"mappings":"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","sourcesContent":["\nclass WebGLMaterial {\n    constructor(glContext, color, ambient, vsSource, fsSource){\n        this.glContext = glContext;\n        this.shaderProgram = null;\n        this.vertexShader = null;\n        this.fragmentShader = null;\n        this.color = color;\n        this.ambient = ambient;\n        this.initShaderProgram(vsSource, fsSource);\n        this.programInfo = {\n            program: this.shaderProgram,\n            attribLocations: {\n                vertexPosition:this.glContext.getAttribLocation(this.shaderProgram, \"vertex_position\"),\n                normal: this.glContext.getAttribLocation(this.shaderProgram, \"vertex_normal\")\n            },\n            uniformLocations: {\n                projectionMatrix: this.glContext.getUniformLocation(this.shaderProgram, \"uProjectionViewMatrix\"),\n                modelViewMatrix: this.glContext.getUniformLocation(this.shaderProgram, \"uModelViewMatrix\"),\n                normalMatrix: this.glContext.getUniformLocation(this.shaderProgram, \"uNormalMatrix\"),\n                ambientLight: this.glContext.getUniformLocation(this.shaderProgram, \"ambientLight\"),\n                lightPosition: this.glContext.getUniformLocation(this.shaderProgram, \"lightPosition\"),\n                color: this.glContext.getUniformLocation(this.shaderProgram, \"color\")\n               // _time: this.glContext.getUniformLocation(this.shaderProgram, \"_time\")\n            }\n        };\n    }\n\n    initShaderProgram(vsSource, fsSource)\n    {\n        this.vertexShader = this.loadShader(this.glContext.VERTEX_SHADER, vsSource);\n        this.fragmentShader = this.loadShader(this.glContext.FRAGMENT_SHADER, fsSource);\n        this.shaderProgram = this.glContext.createProgram();\n        this.glContext.attachShader(this.shaderProgram, this.vertexShader);\n        this.glContext.attachShader(this.shaderProgram, this.fragmentShader);\n        this.glContext.linkProgram(this.shaderProgram);\n        if(!this.glContext.getProgramParameter(this.shaderProgram, this.glContext.LINK_STATUS)){\n            var compilationLog = this.glContext.getProgramInfoLog(this.shaderProgram);\n            console.log('Shader compiler log: ' + compilationLog);\n           // alert(\"Shader Initialization Failed!\");\n        }\n    }\n\n    loadShader(type, source){\n        const shader = this.glContext.createShader(type);\n        this.glContext.shaderSource(shader, source);\n        this.glContext.compileShader(shader);\n        if(!this.glContext.getShaderParameter(shader, this.glContext.COMPILE_STATUS)){\n            var compilationLog = this.glContext.getShaderInfoLog(shader);\n            console.log('Shader compiler log: ' + compilationLog);\n           // alert(\"Shader Compilation Failed!\");\n        }\n        return shader;\n    }\n\n}\n\nexport default WebGLMaterial"]},"metadata":{},"sourceType":"module"}